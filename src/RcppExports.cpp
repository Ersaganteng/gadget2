// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getEcosystemInfo
Rcpp::List getEcosystemInfo();
RcppExport SEXP _gadgetr_getEcosystemInfo() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getEcosystemInfo());
    return rcpp_result_gen;
END_RCPP
}
// getStockInfoC
Rcpp::List getStockInfoC(Rcpp::IntegerVector stockNo);
RcppExport SEXP _gadgetr_getStockInfoC(SEXP stockNoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type stockNo(stockNoSEXP);
    rcpp_result_gen = Rcpp::wrap(getStockInfoC(stockNo));
    return rcpp_result_gen;
END_RCPP
}
// updateRecruitmentC
Rcpp::IntegerVector updateRecruitmentC(Rcpp::IntegerVector stockNo, Rcpp::IntegerVector year, Rcpp::IntegerVector step, Rcpp::IntegerVector area, Rcpp::IntegerVector age, Rcpp::IntegerVector number, Rcpp::NumericVector mean, Rcpp::NumericVector sdev, Rcpp::NumericVector alpha, Rcpp::NumericVector beta, Rcpp::NumericVector length, Rcpp::NumericVector meanWeight);
RcppExport SEXP _gadgetr_updateRecruitmentC(SEXP stockNoSEXP, SEXP yearSEXP, SEXP stepSEXP, SEXP areaSEXP, SEXP ageSEXP, SEXP numberSEXP, SEXP meanSEXP, SEXP sdevSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lengthSEXP, SEXP meanWeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type stockNo(stockNoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type area(areaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type number(numberSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type meanWeight(meanWeightSEXP);
    rcpp_result_gen = Rcpp::wrap(updateRecruitmentC(stockNo, year, step, area, age, number, mean, sdev, alpha, beta, length, meanWeight));
    return rcpp_result_gen;
END_RCPP
}
// updateSuitabilityC
Rcpp::IntegerVector updateSuitabilityC(Rcpp::IntegerVector fleetNo, Rcpp::IntegerVector stockNo, Rcpp::NumericVector len, Rcpp::NumericVector value);
RcppExport SEXP _gadgetr_updateSuitabilityC(SEXP fleetNoSEXP, SEXP stockNoSEXP, SEXP lenSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type fleetNo(fleetNoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type stockNo(stockNoSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type len(lenSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSuitabilityC(fleetNo, stockNo, len, value));
    return rcpp_result_gen;
END_RCPP
}
// wholeSim
Rcpp::IntegerVector wholeSim();
RcppExport SEXP _gadgetr_wholeSim() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(wholeSim());
    return rcpp_result_gen;
END_RCPP
}
// updateAmountStep
Rcpp::IntegerVector updateAmountStep(Rcpp::IntegerVector fleetNo, Rcpp::IntegerVector step, Rcpp::IntegerVector area, Rcpp::NumericVector value);
RcppExport SEXP _gadgetr_updateAmountStep(SEXP fleetNoSEXP, SEXP stepSEXP, SEXP areaSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type fleetNo(fleetNoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type area(areaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(updateAmountStep(fleetNo, step, area, value));
    return rcpp_result_gen;
END_RCPP
}
// updateAmountYear
Rcpp::IntegerVector updateAmountYear(Rcpp::IntegerVector fleetNo, Rcpp::IntegerVector year, Rcpp::IntegerVector step, Rcpp::IntegerVector area, Rcpp::NumericVector value);
RcppExport SEXP _gadgetr_updateAmountYear(SEXP fleetNoSEXP, SEXP yearSEXP, SEXP stepSEXP, SEXP areaSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type fleetNo(fleetNoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type area(areaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(updateAmountYear(fleetNo, year, step, area, value));
    return rcpp_result_gen;
END_RCPP
}
// initSim
Rcpp::IntegerVector initSim();
RcppExport SEXP _gadgetr_initSim() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(initSim());
    return rcpp_result_gen;
END_RCPP
}
// stepSim
Rcpp::IntegerVector stepSim();
RcppExport SEXP _gadgetr_stepSim() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(stepSim());
    return rcpp_result_gen;
END_RCPP
}
// yearSim
Rcpp::IntegerVector yearSim();
RcppExport SEXP _gadgetr_yearSim() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(yearSim());
    return rcpp_result_gen;
END_RCPP
}
// finalizeSim
Rcpp::IntegerVector finalizeSim();
RcppExport SEXP _gadgetr_finalizeSim() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(finalizeSim());
    return rcpp_result_gen;
END_RCPP
}
// finalize
Rcpp::List finalize();
RcppExport SEXP _gadgetr_finalize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(finalize());
    return rcpp_result_gen;
END_RCPP
}
// gadget
Rcpp::List gadget(Rcpp::StringVector args);
RcppExport SEXP _gadgetr_gadget(SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(gadget(args));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gadgetr_getEcosystemInfo", (DL_FUNC) &_gadgetr_getEcosystemInfo, 0},
    {"_gadgetr_getStockInfoC", (DL_FUNC) &_gadgetr_getStockInfoC, 1},
    {"_gadgetr_updateRecruitmentC", (DL_FUNC) &_gadgetr_updateRecruitmentC, 12},
    {"_gadgetr_updateSuitabilityC", (DL_FUNC) &_gadgetr_updateSuitabilityC, 4},
    {"_gadgetr_wholeSim", (DL_FUNC) &_gadgetr_wholeSim, 0},
    {"_gadgetr_updateAmountStep", (DL_FUNC) &_gadgetr_updateAmountStep, 4},
    {"_gadgetr_updateAmountYear", (DL_FUNC) &_gadgetr_updateAmountYear, 5},
    {"_gadgetr_initSim", (DL_FUNC) &_gadgetr_initSim, 0},
    {"_gadgetr_stepSim", (DL_FUNC) &_gadgetr_stepSim, 0},
    {"_gadgetr_yearSim", (DL_FUNC) &_gadgetr_yearSim, 0},
    {"_gadgetr_finalizeSim", (DL_FUNC) &_gadgetr_finalizeSim, 0},
    {"_gadgetr_finalize", (DL_FUNC) &_gadgetr_finalize, 0},
    {"_gadgetr_gadget", (DL_FUNC) &_gadgetr_gadget, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gadgetr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
